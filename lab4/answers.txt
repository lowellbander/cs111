# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Nicole Yee
Student ID: 403 796 037
Email: nicoleyee@ucla.edu

# Partner 2 (if you're working in a team)
Name: Lowell Bander
Student ID: 204 156 534
Email: lowellbander@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We chose to implement concurrency by forking processes.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

There were two instances in which strcpy() was called to copy from one buffer to another. 
This could have been used for a buffer overflow attack, so these two instances were
replaced with calls to strncpy(), so that the number of characters copied could be 
limited to FILENAMESIZ. This way, the copied characters are guaranteed to fit within the 
task struct.

We also made sure that every call to strncpy() was followed by a line that null terminated
the string, so that read operations stop when they're supposed to.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Buffer Overflow Attack
The first attack implemented is in task_download. We attempt to overflow their
buffer by asking for an extra long filename (TASKBUFSIZE - 11) to account for 
the spaces, "GET", and "OSP2P". If the peer only copies the string, without 
checking for an overflow, they will encounter a segmentation fault.

Upload data forever
The second attack is implemented in task_upload. We attempt to send the peer
endless amounts of useless data (using an infinite while loop). The peer
may think that the data is from the valid file, allowing us to fill up their
disk with "Muahahaha!"

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
